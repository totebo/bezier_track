local bezier = require "main.bezier"
local camera = require "orthographic.camera"

local MAX_NODES = 1024

local waypoints = {}
local waypoints_control_positions = {}
local nodes = {}
local node_count = 0
local waypoint_count = 0

local function node_was_added(node)

	if not nodes[waypoint_count] then
		nodes[waypoint_count] = {}
	end
	table.insert(nodes[waypoint_count], node)
	node_count = node_count + 1

	if node_count > MAX_NODES then
		repeat

			local nodes_to_delete = table.remove(nodes, 1)
			for i=1, #nodes_to_delete do
				gui.delete_node(nodes_to_delete[i])
			end
			node_count = node_count - #nodes_to_delete
			waypoint_count = waypoint_count - 1

		until node_count < MAX_NODES 
	end
	
end

local function get_smallest_angle(start_euler_z, target_euler_z)

	local a = target_euler_z - start_euler_z
	if (a > 180) then
		a = a - 360
	elseif (a < -180) then
		a = a + 360
	end
	return start_euler_z + a

end

local function normalise_euler(euler)
	return (euler + 180) % 360 - 180
end

local function get_degrees_difference( a, b )

	local diff = normalise_euler( a - b )

	if diff < 180 then
		return diff
	end

	return diff - 360

end

local function clamp(v, min, max)
	if v < min then
		return min, true
	elseif v > max then
		return max, true
	else
		return v, false
	end
end

local function closest_position_on_line(point, line_start, line_end)

	local heading = line_end-line_start
	local heading_length = vmath.length(heading)
	local heading = vmath.normalize(heading)

	local lhs = point - line_start
	local dotp = vmath.dot(lhs, heading)
	dotp = clamp(dotp, 0, heading_length)
	return line_start + heading * dotp

end

local function get_bezier_quadratic_control_position(in_euler_z, out_euler_z, start_position, end_position)

	local diff = end_position-start_position
	local radians = math.atan2(diff.y, diff.x)
	local distance = vmath.length(diff)

	-- In control
	local control_distance = distance * 0.5
	local in_radians = math.rad(in_euler_z)
	local x = math.cos(in_radians) * control_distance 
	local y = math.sin(in_radians) * control_distance
	local in_control = start_position + vmath.vector3(x,y,0)

	-- Out control
	local out_radians = math.rad(out_euler_z) -- Invert to shoot the line backwards
	local x = math.cos(out_radians) * control_distance 
	local y = math.sin(out_radians) * control_distance
	local out_vector = vmath.vector3(x,y,0)

	local out_control = end_position - out_vector
	local control = (in_control + out_control) * 0.5

	return control

end


local function draw_point(position, color, size, layer)

	local node = gui.new_pie_node(position, vmath.vector3(size,size,0))
	gui.set_screen_position(node, position)
	gui.set_color(node, color)
	gui.set_layer(node, layer)
	node_was_added(node)

end

local function draw_square(position, color, size, layer)

	local node = gui.new_box_node(position, vmath.vector3(size,size,0))
	gui.set_screen_position(node, position)
	gui.set_color(node, color)
	gui.set_layer(node, layer)
	node_was_added(node)

end

local function draw_line(p1, p2, color, size, layer)

	local node = gui.new_box_node(p1, vmath.vector3(size,size,0))
	gui.set_screen_position(node, p1)
	
	-- Rotate
	gui.set_pivot(node, gui.PIVOT_W)
	local radians = math.atan2(p2.y-p1.y, p2.x-p1.x)
	local rotation = vmath.quat_rotation_z(radians)
	gui.set_rotation(node, rotation)

	-- Resize
	local length = vmath.length(p1-p2)/2
	local size = vmath.vector3(length, size, 0)
	gui.set_size(node, size)

	gui.set_color(node, color)
	gui.set_layer(node, layer)
	
	node_was_added(node)

end

local function add_path_node(position)

	draw_point(position, vmath.vector4(0.85,0.85,0.90,1), 20, "path")

end

local function add_waypoint_node(position)

	draw_point(position, vmath.vector4(0.1,0.7,1,1), 10, "waypoints")
	
end

local function add_control_points(p1, p2)

	local color = vmath.vector4(0,0,0,0.05)
	draw_line(p1, p2, color, 2, "control_points")
	draw_square(p1, color, 5, "control_points")
	draw_square(p2, color, 5, "control_points")

end

local function get_waypoint_control_positions(p1, p2, p3)

	-- Average direction angle
	local v1 = p2-p1
	local v2 = p2-p3
	local v1_length = vmath.length(v1)
	local v2_length = vmath.length(v2)
	local nv1 = vmath.normalize(v1)
	local nv2 = vmath.normalize(v2)

	local direction_vector = vmath.normalize(nv1+nv2)
	local direction_radians = math.atan2(direction_vector.y, direction_vector.x)
	local direction_degrees = math.deg(direction_radians)

	-- Max control point distance

	local max_control_point_distance
	if v1_length < v2_length then
		max_control_point_distance = v1_length
	else
		max_control_point_distance = v2_length 
	end

	-- Bend sharpness
	--[[
	local segment_v1 = p1-p2
	local segment_v2 = p2-p3
	local v1_radians = math.atan2(segment_v1.y, segment_v1.x)
	local v2_radians = math.atan2(segment_v2.y, segment_v2.x)
	local v1_degrees = math.deg(v1_radians)
	local v2_degrees = math.deg(v2_radians)
	local degrees_difference = get_degrees_difference(v1_degrees, v2_degrees)

	if math.abs(degrees_difference) < 30 then
		print("straight")
		--direction_radians = 
	end
	--]]
	
--[[

	local v1_radians = math.atan2(nv1.y, nv1.x)
	local v2_radians = math.atan2(nv2.y, nv2.x)

	local v1_degrees = math.deg(v1_radians)
	local v2_degrees = math.deg(v2_radians)

	print("v1_degrees", v1_degrees)
	print("v2_degrees", v2_degrees)
	print("direction_degrees", direction_degrees)
	print("--")
	--]]
	
	--[[
	local speed_fraction = (v1_length+v2_length)/1000
	if speed_fraction > 1 then
		speed_fraction = 1
	end
	--]]
	
	local control_point_distance = max_control_point_distance * 0.5

	if control_point_distance < 50 then
		--control_point_distance = 50
	end
	
	local ca_degrees = direction_degrees+90
	local ca_radians = math.rad(ca_degrees)
	local ca_x = math.cos(ca_radians) * control_point_distance
	local ca_y = math.sin(ca_radians) * control_point_distance
	local ca = p2 + vmath.vector3(ca_x, ca_y, 0)

	local cb_radians = math.rad(normalise_euler(ca_degrees-180))
	local cb_x = math.cos(cb_radians) * control_point_distance
	local cb_y = math.sin(cb_radians) * control_point_distance
	local cb = p2 + vmath.vector3(cb_x, cb_y, 0)

	local c_next
	local c_previous
	local v1_radians = math.atan2(v1.y, v1.x)
	local v2_radians = math.atan2(v2.y, v2.x)
	local v1_degrees = math.deg(v1_radians)
	local v2_degrees = math.deg(v2_radians)
	local degrees_difference = get_degrees_difference(v1_degrees, v2_degrees)
	if degrees_difference > 0 then
		-- ccw
		c_next = ca
		c_previous = cb
	else
		-- cw
		c_next = cb
		c_previous = ca
	end
	
	local control_positions = {
		c_next = c_next,
		c_previous = c_previous,
	}


	add_control_points(c_previous, c_next)

	return control_positions

end


local function add_waypoint(position)

	waypoint_count = waypoint_count + 1
	
	add_waypoint_node(position)

	-- Store waypoint
	local waypoint = {
		position = position,
	}
	table.insert(waypoints, waypoint)

	if #waypoints == 1 then

		waypoint.control_positions = {
			c_next = waypoint.position,
			c_previous = waypoint.position,
		}

	elseif #waypoints >= 3 then

		-- Add control positions to waypoint
		local waypoint1 = waypoints[#waypoints-2]
		local waypoint2 = waypoints[#waypoints-1]
		local waypoint3 = waypoints[#waypoints]
		
		local p1 = waypoint1.position
		local p2 = waypoint2.position
		local p3 = waypoint3.position
		waypoint2.control_positions = get_waypoint_control_positions(p1, p2, p3)

		local c1 = waypoint1.control_positions.c_next
		local c2 = waypoint2.control_positions.c_previous
		
		local curve = bezier.create_cubic_curve(p1, c1, c2, p2)
		for i=1, #curve do
			local position = curve[i]
			add_path_node(position)
		end

	end

end


local function on_press(position)

	add_waypoint(position)

end


local function calculate_control_positions()

	
	
end

function init(self)

	local position = vmath.vector3(350, 100, 0)
	add_waypoint(position)

	local position = vmath.vector3(350, 200, 0)
	add_waypoint(position)

	msg.post("#", "acquire_input_focus")

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)

	if action.pressed then
		--local position = camera.world_to_screen(nil, vmath.vector3(action.x, action.y, 0), gui.ADJUST_FIT)
		--local position = camera.screen_to_world(nil, vmath.vector3(action.screen_x, action.screen_y, 0))
		--local position = vmath.vector3(action.screen_x, action.screen_y, 0)
		local position = vmath.vector3(action.screen_x, action.screen_y, 0)
		on_press(position)
	end
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
